Given an array of integers nums, sort the array in ascending order and return it.

You must solve the problem without using any built-in functions in O(nlog(n)) time complexity and with the smallest space complexity possible.

 

Example 1:

Input: nums = [5,2,3,1]
Output: [1,2,3,5]
Explanation: After sorting the array, the positions of some numbers are not changed (for example, 2 and 3), while the positions of other numbers are changed (for example, 1 and 5).
Example 2:

Input: nums = [5,1,1,2,0,0]
Output: [0,0,1,1,2,5]
Explanation: Note that the values of nums are not necessairly unique.


class Solution {
public:
    vector<int> sortArray(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        //qs(nums, 0, nums.size()-1);

        // vector<int> ans;

        // ans = merge(nums, 0, nums.size()-1);
        // return ans;
        return nums;
    }

    void qs(vector<int>& nums, int left, int right) {
        if (left >= right) return;

        int l = left, r = right, mid = l + (r-l)/2;
        int p = nums[mid];

        while (l < r) {
            while (nums[l] < p) l++;
            while (nums[r] > p) r--;

            if (l <= r) {
                swap(nums[l], nums[r]);
                l++;
                r--;
            } 
        }

        qs(nums, left, r);
        qs(nums, l, right);
    }

    vector<int> merge(vector<int>& nums, int l, int r) {
        vector<int> ret;

        if (l >= r) {
            ret.push_back(nums[l]);
            return ret;
        }
        int mid = l + (r-l)/2;
        vector<int> left = merge(nums, l, mid);
        vector<int> right = merge(nums, mid+1, r);

        int i = 0, j = 0;
        while (i < left.size() && j < right.size()) {
            if (left[i] < right[j]) {
                ret.push_back(left[i]);
                i++;
            } else {
                ret.push_back(right[j]);
                j++;
            }
        }

        while (i < left.size()) {
            ret.push_back(left[i]);
            i++;
        }
        while (j < right.size()) {
            ret.push_back(right[j]);
            j++;
        }
        return ret;
    }

};
